/**
 * Siigo.Alliances API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUnauthorizedTermsCommand from '../model/CreateUnauthorizedTermsCommand';
import TermsViewModel from '../model/TermsViewModel';
import UnauthorizedTermsViewModel from '../model/UnauthorizedTermsViewModel';

/**
* Terms service.
* @module api/TermsApi
* @version V1
*/
export default class TermsApi {

    /**
    * Constructs a new TermsApi. 
    * @alias module:api/TermsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get last Terms by AllianceId
     * @param {String} allianceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TermsViewModel} and HTTP response
     */
    apiTermsAllianceIdGetWithHttpInfo(allianceId) {
      let postBody = null;
      // verify the required parameter 'allianceId' is set
      if (allianceId === undefined || allianceId === null) {
        throw new Error("Missing the required parameter 'allianceId' when calling apiTermsAllianceIdGet");
      }

      let pathParams = {
        'allianceId': allianceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TermsViewModel;
      return this.apiClient.callApi(
        '/api/terms/{allianceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get last Terms by AllianceId
     * @param {String} allianceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TermsViewModel}
     */
    apiTermsAllianceIdGet(allianceId) {
      return this.apiTermsAllianceIdGetWithHttpInfo(allianceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unauthorized the terms
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUnauthorizedTermsCommand} opts.createUnauthorizedTermsCommand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UnauthorizedTermsViewModel} and HTTP response
     */
    apiUnauthorizedTermsPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createUnauthorizedTermsCommand'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UnauthorizedTermsViewModel;
      return this.apiClient.callApi(
        '/api/unauthorized_terms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unauthorized the terms
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUnauthorizedTermsCommand} opts.createUnauthorizedTermsCommand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UnauthorizedTermsViewModel}
     */
    apiUnauthorizedTermsPost(opts) {
      return this.apiUnauthorizedTermsPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
