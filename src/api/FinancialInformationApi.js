/**
 * Siigo.Alliances API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FinancialInformationViewModel from '../model/FinancialInformationViewModel';
import UpdateFinancialInformationViewModel from '../model/UpdateFinancialInformationViewModel';

/**
* FinancialInformation service.
* @module api/FinancialInformationApi
* @version V1
*/
export default class FinancialInformationApi {

    /**
    * Constructs a new FinancialInformationApi. 
    * @alias module:api/FinancialInformationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.periodStart 
     * @param {Number} opts.periodEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinancialInformationViewModel} and HTTP response
     */
    apiFinancialInformationGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'period_start': opts['periodStart'],
        'period_end': opts['periodEnd']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = FinancialInformationViewModel;
      return this.apiClient.callApi(
        '/api/financial-information', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.periodStart 
     * @param {Number} opts.periodEnd 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinancialInformationViewModel}
     */
    apiFinancialInformationGet(opts) {
      return this.apiFinancialInformationGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.financialinformationQuery 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UpdateFinancialInformationViewModel} and HTTP response
     */
    apiUpdateFinancialInformationPutWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'financialinformationQuery': opts['financialinformationQuery']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UpdateFinancialInformationViewModel;
      return this.apiClient.callApi(
        '/api/update-financial-information', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.financialinformationQuery 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UpdateFinancialInformationViewModel}
     */
    apiUpdateFinancialInformationPut(opts) {
      return this.apiUpdateFinancialInformationPutWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
