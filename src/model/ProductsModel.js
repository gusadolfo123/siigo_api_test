/**
 * Siigo API
 * Siigo Api v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountGroup from './AccountGroup';
import AdditionalFields from './AdditionalFields';
import Metadata from './Metadata';
import PriceListViewModel from './PriceListViewModel';
import Tax from './Tax';
import UnitProductsViewModel from './UnitProductsViewModel';
import Warehouse from './Warehouse';

/**
 * The ProductsModel model module.
 * @module model/ProductsModel
 * @version v1
 */
class ProductsModel {
    /**
     * Constructs a new <code>ProductsModel</code>.
     * @alias module:model/ProductsModel
     */
    constructor() { 
        
        ProductsModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductsModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductsModel} obj Optional instance to populate.
     * @return {module:model/ProductsModel} The populated <code>ProductsModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductsModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('account_group')) {
                obj['account_group'] = AccountGroup.constructFromObject(data['account_group']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('stock_control')) {
                obj['stock_control'] = ApiClient.convertToType(data['stock_control'], 'Boolean');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_classification')) {
                obj['tax_classification'] = ApiClient.convertToType(data['tax_classification'], 'String');
            }
            if (data.hasOwnProperty('tax_included')) {
                obj['tax_included'] = ApiClient.convertToType(data['tax_included'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_consumption_value')) {
                obj['tax_consumption_value'] = ApiClient.convertToType(data['tax_consumption_value'], 'Number');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [Tax]);
            }
            if (data.hasOwnProperty('prices')) {
                obj['prices'] = ApiClient.convertToType(data['prices'], [PriceListViewModel]);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = UnitProductsViewModel.constructFromObject(data['unit']);
            }
            if (data.hasOwnProperty('unit_label')) {
                obj['unit_label'] = ApiClient.convertToType(data['unit_label'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = AdditionalFields.constructFromObject(data['additional_fields']);
            }
            if (data.hasOwnProperty('available_quantity')) {
                obj['available_quantity'] = ApiClient.convertToType(data['available_quantity'], 'Number');
            }
            if (data.hasOwnProperty('warehouses')) {
                obj['warehouses'] = ApiClient.convertToType(data['warehouses'], [Warehouse]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
        }
        return obj;
    }


}

/**
 * Represents the unique Id of product, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
 * @member {String} id
 */
ProductsModel.prototype['id'] = undefined;

/**
 * Represents the identification code of the product. This value can be an alphanumeric  code that will represent the code id of the cost center.  For example, this name can be 'Item-1' or 'toy007'.
 * @member {String} code
 */
ProductsModel.prototype['code'] = undefined;

/**
 * Represents the name of product or service.
 * @member {String} name
 */
ProductsModel.prototype['name'] = undefined;

/**
 * @member {module:model/AccountGroup} account_group
 */
ProductsModel.prototype['account_group'] = undefined;

/**
 * Represents the type of product. This product could be of type 'Product', 'Service' or 'Consumer Good',  by the default this field will be 'Product'.
 * @member {String} type
 */
ProductsModel.prototype['type'] = undefined;

/**
 * Represents the inventory control.  This field can be 'true' or 'false', by the fault this field will be false.
 * @member {Boolean} stock_control
 */
ProductsModel.prototype['stock_control'] = undefined;

/**
 * Represents the status of product.  This field can be 'true' or 'false', by default this field will be true.
 * @member {Boolean} active
 */
ProductsModel.prototype['active'] = undefined;

/**
 * Represent the tax classification, this field could be 'Taxed', 'Exempt' or 'Excluded'.
 * @member {String} tax_classification
 */
ProductsModel.prototype['tax_classification'] = undefined;

/**
 * Represents whether this product has VAT included.  This field can be 'true' or 'false'.
 * @member {Boolean} tax_included
 */
ProductsModel.prototype['tax_included'] = undefined;

/**
 * Represents value of consumption tax.
 * @member {Number} tax_consumption_value
 */
ProductsModel.prototype['tax_consumption_value'] = undefined;

/**
 * Contains a list of taxes associated to item.
 * @member {Array.<module:model/Tax>} taxes
 */
ProductsModel.prototype['taxes'] = undefined;

/**
 * Contains a list with 'prices list' of product. Every product can have up to 12 price list.
 * @member {Array.<module:model/PriceListViewModel>} prices
 */
ProductsModel.prototype['prices'] = undefined;

/**
 * @member {module:model/UnitProductsViewModel} unit
 */
ProductsModel.prototype['unit'] = undefined;

/**
 * Represents Unit of measure for invoice printing.
 * @member {String} unit_label
 */
ProductsModel.prototype['unit_label'] = undefined;

/**
 * Represents the Reference or factory code of the product or service.
 * @member {String} reference
 */
ProductsModel.prototype['reference'] = undefined;

/**
 * Represents product description.
 * @member {String} description
 */
ProductsModel.prototype['description'] = undefined;

/**
 * @member {module:model/AdditionalFields} additional_fields
 */
ProductsModel.prototype['additional_fields'] = undefined;

/**
 * Represents the Available Quantity of the product.
 * @member {Number} available_quantity
 */
ProductsModel.prototype['available_quantity'] = undefined;

/**
 * Contains a list of information about the warehouse associated to item.
 * @member {Array.<module:model/Warehouse>} warehouses
 */
ProductsModel.prototype['warehouses'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
ProductsModel.prototype['metadata'] = undefined;






export default ProductsModel;

