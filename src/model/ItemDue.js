/**
 * Siigo API
 * Siigo Api v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemDue model module.
 * @module model/ItemDue
 * @version 0.0.0
 */
class ItemDue {
    /**
     * Constructs a new <code>ItemDue</code>.
     * @alias module:model/ItemDue
     */
    constructor() { 
        
        ItemDue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemDue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemDue} obj Optional instance to populate.
     * @return {module:model/ItemDue} The populated <code>ItemDue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemDue();

            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('consecutive')) {
                obj['consecutive'] = ApiClient.convertToType(data['consecutive'], 'Number');
            }
            if (data.hasOwnProperty('quote')) {
                obj['quote'] = ApiClient.convertToType(data['quote'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Represents the prefix of the invoice to which the credit or payment will be applied.
 * @member {String} prefix
 */
ItemDue.prototype['prefix'] = undefined;

/**
 * Represents the consecutive of the invoice to which the credit or payment will be applied.
 * @member {Number} consecutive
 */
ItemDue.prototype['consecutive'] = undefined;

/**
 * Represents the quota number of the credit or payment.
 * @member {Number} quote
 */
ItemDue.prototype['quote'] = undefined;

/**
 * Represents the payment date of the fee.
 * @member {String} date
 */
ItemDue.prototype['date'] = undefined;






export default ItemDue;

