/**
 * Siigo API
 * Siigo Api v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiscountModel from './DiscountModel';
import TaxesModel from './TaxesModel';
import WarehouseModel from './WarehouseModel';

/**
 * The ItemsModel model module.
 * @module model/ItemsModel
 * @version v1
 */
class ItemsModel {
    /**
     * Constructs a new <code>ItemsModel</code>.
     * @alias module:model/ItemsModel
     */
    constructor() { 
        
        ItemsModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemsModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemsModel} obj Optional instance to populate.
     * @return {module:model/ItemsModel} The populated <code>ItemsModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemsModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('seller')) {
                obj['seller'] = ApiClient.convertToType(data['seller'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = DiscountModel.constructFromObject(data['discount']);
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [TaxesModel]);
            }
            if (data.hasOwnProperty('warehouse')) {
                obj['warehouse'] = WarehouseModel.constructFromObject(data['warehouse']);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Represents the unique Id of item, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
 * @member {String} id
 */
ItemsModel.prototype['id'] = undefined;

/**
 * Represents the unique code of the item. This value can be an alphanumeric  code that will represent the code id of the item.  For example,'item-1' or 'toy-007'.
 * @member {String} code
 */
ItemsModel.prototype['code'] = undefined;

/**
 * Represents product quantity.  For example, '2' quantities of the 'item-01'.
 * @member {Number} quantity
 */
ItemsModel.prototype['quantity'] = undefined;

/**
 * Represents product price.  For example, '50', dollars.
 * @member {Number} price
 */
ItemsModel.prototype['price'] = undefined;

/**
 * Represents the Id of the seller associated with the invoice,   for example, the id '629' can represent a seller called 'Micke'.
 * @member {Number} seller
 */
ItemsModel.prototype['seller'] = undefined;

/**
 * Represents product description.
 * @member {String} description
 */
ItemsModel.prototype['description'] = undefined;

/**
 * @member {module:model/DiscountModel} discount
 */
ItemsModel.prototype['discount'] = undefined;

/**
 * Contains a list of taxes associated to item.
 * @member {Array.<module:model/TaxesModel>} taxes
 */
ItemsModel.prototype['taxes'] = undefined;

/**
 * @member {module:model/WarehouseModel} warehouse
 */
ItemsModel.prototype['warehouse'] = undefined;

/**
 * Represents the price of item with the tax included.
 * @member {Number} total
 */
ItemsModel.prototype['total'] = undefined;






export default ItemsModel;

