"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CreateCustomerCommand = _interopRequireDefault(require("../model/CreateCustomerCommand"));

var _CustomerDeleteViewModel = _interopRequireDefault(require("../model/CustomerDeleteViewModel"));

var _CustomerViewModel = _interopRequireDefault(require("../model/CustomerViewModel"));

var _CustomersViewModel = _interopRequireDefault(require("../model/CustomersViewModel"));

/**
 * Siigo API
 * Siigo Api v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
* Customer service.
* @module api/CustomerApi
* @version v1
*/
var CustomerApi = /*#__PURE__*/function () {
  /**
  * Constructs a new CustomerApi. 
  * @alias module:api/CustomerApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function CustomerApi(apiClient) {
    (0, _classCallCheck2["default"])(this, CustomerApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Creates a customer.
   * @param {Object} opts Optional parameters
   * @param {module:model/CreateCustomerCommand} opts.createCustomerCommand Represents the request with the customer information.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerViewModel} and HTTP response
   */


  (0, _createClass2["default"])(CustomerApi, [{
    key: "createCustomerWithHttpInfo",
    value: function createCustomerWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['createCustomerCommand'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _CustomerViewModel["default"];
      return this.apiClient.callApi('/v1/customers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Creates a customer.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCustomerCommand} opts.createCustomerCommand Represents the request with the customer information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerViewModel}
     */

  }, {
    key: "createCustomer",
    value: function createCustomer(opts) {
      return this.createCustomerWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Deletes the customer by GUID.
     * @param {String} id Represents the unique Id of customer, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerDeleteViewModel} and HTTP response
     */

  }, {
    key: "deleteCustomerWithHttpInfo",
    value: function deleteCustomerWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCustomer");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _CustomerDeleteViewModel["default"];
      return this.apiClient.callApi('/v1/customers/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Deletes the customer by GUID.
     * @param {String} id Represents the unique Id of customer, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerDeleteViewModel}
     */

  }, {
    key: "deleteCustomer",
    value: function deleteCustomer(id) {
      return this.deleteCustomerWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Gets the customer by GUID.
     * @param {String} id Represents the unique Id of customer, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerViewModel} and HTTP response
     */

  }, {
    key: "getCustomerWithHttpInfo",
    value: function getCustomerWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomer");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _CustomerViewModel["default"];
      return this.apiClient.callApi('/v1/customers/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Gets the customer by GUID.
     * @param {String} id Represents the unique Id of customer, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerViewModel}
     */

  }, {
    key: "getCustomer",
    value: function getCustomer(id) {
      return this.getCustomerWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Returns a paginated list of customers.
     * @param {Object} opts Optional parameters
     * @param {String} opts.identification Represents the identification number of customer.  For example, the identifitication number '13832081'.
     * @param {Number} opts.branchOffice Represents the branch office of customer, this value by default will be 0.
     * @param {String} opts.active Represents the state of customer.  This value can be 'true' or 'false', by default will be true.
     * @param {String} opts.type Represents the customer type (this type can be 'Customer', 'Supplier 'and 'Other'),  this field will be 'Customer' by default.
     * @param {String} opts.personType Represents the person type, this type can be a 'Person' or 'Company'.
     * @param {Date} opts.createdStart Returns results where the \"created\" field is greater or equal than the entered date
     * @param {Date} opts.createdEnd Returns results where the \"created\" field is less or equal than the entered date
     * @param {Date} opts.dateStart Returns results with date greater or equal than the \"date_start\" date
     * @param {Date} opts.dateEnd Returns results with date less or equal than the \"date_end\" date
     * @param {Date} opts.updatedStart Returns results where the \"last_updated\" field is greater or equal than the entered date
     * @param {Date} opts.updatedEnd Returns results where the \"last_updated\" field is less or equal than the entered date
     * @param {Number} opts.page Represents the current page
     * @param {Number} opts.pageSize Represents the number of results per page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomersViewModel} and HTTP response
     */

  }, {
    key: "getCustomersWithHttpInfo",
    value: function getCustomersWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'identification': opts['identification'],
        'branch_office': opts['branchOffice'],
        'active': opts['active'],
        'type': opts['type'],
        'person_type': opts['personType'],
        'created_start': opts['createdStart'],
        'created_end': opts['createdEnd'],
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'updated_start': opts['updatedStart'],
        'updated_end': opts['updatedEnd'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _CustomersViewModel["default"];
      return this.apiClient.callApi('/v1/customers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Returns a paginated list of customers.
     * @param {Object} opts Optional parameters
     * @param {String} opts.identification Represents the identification number of customer.  For example, the identifitication number '13832081'.
     * @param {Number} opts.branchOffice Represents the branch office of customer, this value by default will be 0.
     * @param {String} opts.active Represents the state of customer.  This value can be 'true' or 'false', by default will be true.
     * @param {String} opts.type Represents the customer type (this type can be 'Customer', 'Supplier 'and 'Other'),  this field will be 'Customer' by default.
     * @param {String} opts.personType Represents the person type, this type can be a 'Person' or 'Company'.
     * @param {Date} opts.createdStart Returns results where the \"created\" field is greater or equal than the entered date
     * @param {Date} opts.createdEnd Returns results where the \"created\" field is less or equal than the entered date
     * @param {Date} opts.dateStart Returns results with date greater or equal than the \"date_start\" date
     * @param {Date} opts.dateEnd Returns results with date less or equal than the \"date_end\" date
     * @param {Date} opts.updatedStart Returns results where the \"last_updated\" field is greater or equal than the entered date
     * @param {Date} opts.updatedEnd Returns results where the \"last_updated\" field is less or equal than the entered date
     * @param {Number} opts.page Represents the current page
     * @param {Number} opts.pageSize Represents the number of results per page.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomersViewModel}
     */

  }, {
    key: "getCustomers",
    value: function getCustomers(opts) {
      return this.getCustomersWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Updates the customer by GUID.
     * @param {String} id Represents the unique Id of customer, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCustomerCommand} opts.createCustomerCommand Represents the request with the customer information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerViewModel} and HTTP response
     */

  }, {
    key: "updateCustomerWithHttpInfo",
    value: function updateCustomerWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = opts['createCustomerCommand']; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCustomer");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _CustomerViewModel["default"];
      return this.apiClient.callApi('/v1/customers/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Updates the customer by GUID.
     * @param {String} id Represents the unique Id of customer, this value must be a Guid  with the next format 00000000-0000-0000-0000-000000000000.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCustomerCommand} opts.createCustomerCommand Represents the request with the customer information.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerViewModel}
     */

  }, {
    key: "updateCustomer",
    value: function updateCustomer(id, opts) {
      return this.updateCustomerWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return CustomerApi;
}();

exports["default"] = CustomerApi;