"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _CreateUnauthorizedTermsCommand = _interopRequireDefault(require("../model/CreateUnauthorizedTermsCommand"));

var _TermsViewModel = _interopRequireDefault(require("../model/TermsViewModel"));

var _UnauthorizedTermsViewModel = _interopRequireDefault(require("../model/UnauthorizedTermsViewModel"));

/**
 * Siigo.Alliances API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
* Terms service.
* @module api/TermsApi
* @version V1
*/
var TermsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new TermsApi. 
  * @alias module:api/TermsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function TermsApi(apiClient) {
    (0, _classCallCheck2["default"])(this, TermsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Get last Terms by AllianceId
   * @param {String} allianceId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TermsViewModel} and HTTP response
   */


  (0, _createClass2["default"])(TermsApi, [{
    key: "apiTermsAllianceIdGetWithHttpInfo",
    value: function apiTermsAllianceIdGetWithHttpInfo(allianceId) {
      var postBody = null; // verify the required parameter 'allianceId' is set

      if (allianceId === undefined || allianceId === null) {
        throw new Error("Missing the required parameter 'allianceId' when calling apiTermsAllianceIdGet");
      }

      var pathParams = {
        'allianceId': allianceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _TermsViewModel["default"];
      return this.apiClient.callApi('/api/terms/{allianceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get last Terms by AllianceId
     * @param {String} allianceId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TermsViewModel}
     */

  }, {
    key: "apiTermsAllianceIdGet",
    value: function apiTermsAllianceIdGet(allianceId) {
      return this.apiTermsAllianceIdGetWithHttpInfo(allianceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Unauthorized the terms
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUnauthorizedTermsCommand} opts.createUnauthorizedTermsCommand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UnauthorizedTermsViewModel} and HTTP response
     */

  }, {
    key: "apiUnauthorizedTermsPostWithHttpInfo",
    value: function apiUnauthorizedTermsPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['createUnauthorizedTermsCommand'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['Bearer'];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = _UnauthorizedTermsViewModel["default"];
      return this.apiClient.callApi('/api/unauthorized_terms', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Unauthorized the terms
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateUnauthorizedTermsCommand} opts.createUnauthorizedTermsCommand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UnauthorizedTermsViewModel}
     */

  }, {
    key: "apiUnauthorizedTermsPost",
    value: function apiUnauthorizedTermsPost(opts) {
      return this.apiUnauthorizedTermsPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return TermsApi;
}();

exports["default"] = TermsApi;