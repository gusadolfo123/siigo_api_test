"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

/**
 * Siigo API
 * Siigo Api v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * The TaxViewModel model module.
 * @module model/TaxViewModel
 * @version v1
 */
var TaxViewModel = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TaxViewModel</code>.
   * @alias module:model/TaxViewModel
   */
  function TaxViewModel() {
    (0, _classCallCheck2["default"])(this, TaxViewModel);
    TaxViewModel.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  (0, _createClass2["default"])(TaxViewModel, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>TaxViewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxViewModel} obj Optional instance to populate.
     * @return {module:model/TaxViewModel} The populated <code>TaxViewModel</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TaxViewModel();

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'Number');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }

        if (data.hasOwnProperty('percentage')) {
          obj['percentage'] = _ApiClient["default"].convertToType(data['percentage'], 'Number');
        }

        if (data.hasOwnProperty('active')) {
          obj['active'] = _ApiClient["default"].convertToType(data['active'], 'Boolean');
        }
      }

      return obj;
    }
  }]);
  return TaxViewModel;
}();
/**
 * Represents the id of the tax, the value of this field must be an integer  number that represents the unique id of the tax.
 * @member {Number} id
 */


TaxViewModel.prototype['id'] = undefined;
/**
 * Represents the name of tax. For example, 'VAT 19%'.
 * @member {String} name
 */

TaxViewModel.prototype['name'] = undefined;
/**
 * Represents the type of the tax. This field can be 'Retefuente', 'IVA', 'ReteIVA',  'ReteICA', 'Impoconsumo', 'AdValorem', or 'Autorretencion'.
 * @member {String} type
 */

TaxViewModel.prototype['type'] = undefined;
/**
 * Represents the numerical percentage of the tax. For example, '19' is equal to '19%'.
 * @member {Number} percentage
 */

TaxViewModel.prototype['percentage'] = undefined;
/**
 * Represents if the status of the tax is activated or disabled,   the value of this status will be true (for activated) or false (disabled).  By default, this field will be active.
 * @member {Boolean} active
 */

TaxViewModel.prototype['active'] = undefined;
var _default = TaxViewModel;
exports["default"] = _default;